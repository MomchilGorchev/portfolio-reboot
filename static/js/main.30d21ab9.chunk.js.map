{"version":3,"sources":["util/mainCanvas.js","App.js","serviceWorker.js","index.js"],"names":["window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","Space","_this","canvas","document","getElementById","ctx","getContext","WIDTH","width","innerWidth","HEIGHT","height","innerHeight","cx","cy","stars","planets","Rnd","Math","random","alpha","globalAlpha","warpZ","alphaIncrease","setInterval","clearInterval","resetBubble","a","x","y","z","px","py","loop","fillStyle","fillRect","i","includes","n","xx","yy","radius","beginPath","arc","PI","closePath","fill","Z","push","array","floor","length","console","log","generatePlanets","generate","App","react_default","createElement","className","id","class","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30d21ab9.chunk.js","sourcesContent":["/**\n * Hero's canvas and initial animation sequence scripts\n */\nwindow.requestAnimationFrame = window.requestAnimationFrame\n    || window.mozRequestAnimationFrame\n    || window.webkitRequestAnimationFrame\n    || window.msRequestAnimationFrame;\n\n// [DEBUG]\n//console.log(util.mobileDevice());\n\n/**\n * Main canvas scene\n * @constructor\n */\nexport const Space = () => {\n    const _this = this || {};\n    let canvas = document.getElementById('welcome'),\n        ctx = canvas.getContext('2d'),\n        WIDTH = canvas.width = window.innerWidth,\n        HEIGHT = canvas.height = window.innerHeight,\n        centerX = WIDTH/2, centerY = HEIGHT/ 2,\n        cx = centerX,\n        cy = centerY,\n        units = 200,\n        planetUnits = 50,\n        stars = [],\n        planets = [],\n        Z = 0.09,\n        M = Math,\n        Rnd = M.random,\n        alpha = 0.05,\n        color = '143, 194, 204';\n\n    ctx.globalAlpha = 0.66;\n    _this.warpZ = 8;\n\n    // Increase the alpha every 400 ms for smooth animation\n    const alphaIncrease = setInterval(() => {\n        if(alpha < 0.65) {\n            alpha += 0.05;\n        } else {\n            clearInterval(alphaIncrease);\n        }\n    }, 400);\n\n    // Returns random array index\n    const randomIndex = array =>\n        Math.floor(Math.random() * array.length)\n\n    const generatePlanets = () => {\n        for(let i = 0; i < planetUnits; i++) {\n            planets[i] = randomIndex(stars)\n        }\n\n        console.log('planets: ', planets)\n    }\n\n\n    // Init loop\n    const initSpace = () => {\n        generate();\n        loop();\n    }\n\n    // Calculate position\n    const resetBubble = a => {\n        a.x = (Rnd() * WIDTH - (WIDTH * 0.5)) * _this.warpZ;\n        a.y = (Rnd() * HEIGHT - (HEIGHT * 0.5)) * _this.warpZ;\n        a.z = _this.warpZ;\n        a.px = 0;\n        a.py = 0;\n    }\n\n    // First position\n    const generate = () => {\n        for (let i = 0, n; i < units; i++){\n            n = {};\n            resetBubble(n);\n            stars.push(n);\n        }\n        generatePlanets()\n    }\n\n    // Main animation sequence\n    const loop = () => {\n        ctx.fillStyle ='black';\n        ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n        // update all stars\n        for (let i = 0; i < units; i++){\n            const isPlanet = planets.includes(i)\n            const n = stars[i],\n                xx = n.x / n.z,          // star position\n                yy = n.y / n.z,\n                radius = 1.0 / n.z * 1.7 + 1;      // size i.e. z\n\n            ctx.fillStyle = 'rgba('+ color +', '+ alpha +')';\n            //console.log(ctx.fillStyle);\n            if (n.px !== 0){\n                ctx.beginPath();\n                // Star\n                ctx.arc(xx + cx, yy + cy, radius, 0, Math.PI * 2, true);\n                // Star trace\n                ctx.arc(n.px + cx, n.py + cy, radius, 0, Math.PI * 2, true);\n                ctx.closePath();\n                ctx.fill();\n            }\n\n            // update star position values with new settings\n            n.px = xx;\n            n.py = yy;\n            n.z -= Z * 2;\n\n            // reset when star is out of the view field\n            if (n.z < Z || n.px > WIDTH || n.py > HEIGHT){\n                // reset star\n                resetBubble(n);\n            }\n        }\n        requestAnimationFrame(loop);\n    }\n\n    initSpace();\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Space } from './util/mainCanvas'\n\n\n// TODO\n// Add no zoom for mobile devices\n// Fix Canvas height\n// Add more widgets\n\nclass App extends Component {\n\n  componentDidMount() {\n    Space()\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <canvas id='welcome' />\n          <p class='placeholder-text'>\n            LANDING SOON\n          </p>\n          <span className='telemetry left'>\n            <span className='metric'>\n              LOCATION: <span className='green'>In transition</span>\n            </span>\n            <span className='metric'>\n              DESTINATION: <span className='green'>Proxima B UFH27679-9</span>\n            </span>\n            <span className='metric'>\n              SPEED: <span className='green'>optimal</span>\n            </span>\n            <span className='metric'>\n              PRESSURE: <span className='green'>optimal</span>\n            </span>\n            <span className='metric'>\n              TRAJECTORY: <span className='green'>optimal</span>\n            </span>\n            <span className='metric'>\n              FUEL: <span className='orange'>57%</span>\n            </span>\n            <span className='metric'>\n              <div className='dial'>\n                <div className='label'>\n                  SHIELDS: <span className='orange'>8%</span>\n                </div>\n              </div>\n            </span>\n          </span>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}